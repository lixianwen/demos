# This file is a template, and might need editing before it works on your project.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

default:
  image: golang:latest
  before_script:
    - go mod tidy

variables:
  GOPROXY: "https://goproxy.cn,direct"

testproxy:
  stage: test
  services:
    - name: lscr.io/linuxserver/openssh-server:version-8.6_p1-r3
      alias: openssh
    - name: mysql:5.7
      alias: db
  variables:
    TZ: Asia/Shanghai
    USER_NAME: user
    USER_PASSWORD: passwd
    PASSWORD_ACCESS: "true"
    MYSQL_DATABASE: income
    MYSQL_ROOT_PASSWORD: 123456@Example.com
  before_script:
    - go install github.com/axw/gocov/gocov@latest
    - go mod tidy
  script:
    - gocov test -bench . -race  $(go list ./... | grep -v /vendor/ | grep myproxy) | gocov report

stages:  # List of stages for jobs, and their order of execution       
  - test
  - build
  - inform
  - deploy
  - cleanup

path:
  stage: .pre
  script:
    - echo $PATH
    - echo $AK
    - echo $SK
    - echo $SSHPUBLICKEY
  tags:
    - go

export: # Export all predefined variables and all self-defined variables.
  stage: .pre
  script:
    - export
  tags:
    - go

compile:       # This job runs in the build stage.
  stage: build
  script:
    - go build -o webhook
  retry: 2
  tags:
    - go
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      - webhook
    untracked: false
    when: on_success
    expire_in: 1 days

format:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
  tags:
    - go

vet:
  stage: test
  script:
    - go vet $(go list ./... | grep -v /vendor/)
  tags:
    - go

test:   # This job runs in the test stage.
  stage: test
  before_script:
    - go install github.com/axw/gocov/gocov@latest
    - go mod tidy
  script:
    - gocov test -bench . -race  $(go list ./... | grep -v /vendor/ | grep -v myproxy) | gocov report
  tags:
    - go
  variables:
    CGO_ENABLED: "1"
    SESSION_KEY: "yd5324A85B0D6241A6AC9C1D51883CC271"
  # coverage: '/coverage: \d+.\d+% of statements/'
  coverage: '/Total Coverage: \d+.\d+%/'

email_us:
  stage: inform
  script:
    - echo "Build failed"
  tags:
    - go
  when: on_failure

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  tags:
    - go
  when: manual

cleanup_job:
  stage: cleanup
  script:
    - echo "cleanup after jobs"
  tags:
    - go
  when: always
